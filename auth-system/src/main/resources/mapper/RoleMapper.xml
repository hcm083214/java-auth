<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hcm.system.mapper.RoleMapper">

    <select id="getAllPermissions" resultType="Long">
        select distinct menu_id
        from sys_role_menu
    </select>

    <sql id="roleInfo">
        r.role_id
        roleId,
        r.role_name_cn roleNameCn,
        r.role_name_en roleNameEn,
        r.role_description_cn roleDescriptionCn,
        r.role_description_en roleDescriptionEn,
        r.function_json functionJson,
        r.role_sort roleSort,
        r.create_time createTime,
        r.status status
    </sql>
    <sql id="searchOption">
        <if test="role.roleNameCn!= null and role.roleNameCn != ''">
            and r.role_name_cn like concat('%', #{role.roleNameCn}, '%')
        </if>
        <if test="role.roleNameEn!= null and role.roleNameEn != ''">
            and r.role_name_en like concat('%', #{role.roleNameEn}, '%')
        </if>
        <if test="role.status != null and role.status != ''">
            and r.status = #{role.status}
        </if>
    </sql>

    <select id="getRole" resultType="com.hcm.common.core.entity.SysRole">
        select <include refid="roleInfo"></include> from sys_role r where role_id = #{roleId}
    </select>

    <select id="getRoles" resultType="com.hcm.common.core.entity.SysRole">
        select <include refid="roleInfo"></include> from sys_role r where 1=1
        <include refid="searchOption"></include>
    </select>

    <select id="getRolesByFunKey" resultType="com.hcm.common.core.entity.SysRole">
        select <include refid="roleInfo"></include> from sys_role r
        left join sys_role_function rf on rf.role_id = r.role_id
        left join sys_function f on rf.function_id = f.function_id
        where f.function_key = #{role.functionKey}
    </select>

    <select id="getParamsList" resultType="string">
        <if test="type!= null and type == 'role_name_cn'">
            select distinct r.role_name_cn from sys_role r
        </if>
        <if test="type!= null and type == 'role_name_en'">
            select distinct r.role_name_en from sys_role r
        </if>
        where 1=1
        <include refid="searchOption"></include>
        limit 400
    </select>

    <select id="getFunctionListById" resultType="java.lang.Long">
        select function_id
        from sys_role_function
        where role_id = #{roleId}
    </select>

    <select id="getUserRoleInfoById" resultType="com.hcm.common.core.entity.SysRole">
        select r.role_id roleId, r.function_json functionJson
        from sys_user_role u
                 left join sys_role r on u.role_id = r.role_id
        where u.user_id = #{userId}
    </select>

    <select id="getPermissionsByRoleIds" resultType="java.lang.Long">

    </select>

    <insert id="insertRole" useGeneratedKeys="true" keyProperty="roleId">
        insert into sys_role (role_name_cn, role_name_en, role_description_cn, role_description_en, function_json,
                              status, create_time, update_time)
        values (#{role.roleNameCn}, #{role.roleNameEn}, #{role.roleDescriptionCn}, #{role.roleDescriptionEn},
                #{role.functionJson}, '1', now(), now())
    </insert>

    <insert id="insertRoleList">
        insert into sys_role (role_name_cn,role_name_en,role_sort,status,create_time,update_time) values
        <foreach collection="roles" item="role" separator=",">
            (#{role.roleNameCn},#{role.roleNameEn},#{role.roleSort},#{role.status},now(),now())
        </foreach>
        on duplicate key update
        status = values(status),update_time = now()
    </insert>

    <insert id="insertRoleFunctionList">
        insert into sys_role_function (role_id,function_id) values
        <foreach collection="functionIds" item="functionId" separator=",">
            (${roleId},#{functionId})
        </foreach>
    </insert>

    <update id="editRole">
        update sys_role
        set role_name_cn = #{role.roleNameCn},
        role_name_en = #{role.roleNameEn},
        role_description_cn = #{role.roleDescriptionCn},
        role_description_en = #{role.roleDescriptionEn},
        function_json = #{role.functionJson},
        <if test="role.status != null and role.status != ''">
            status = #{role.status},
        </if>
        update_time = now()
        where role_id = #{role.roleId}
    </update>

    <delete id="deleteRoleFunctionList">
        delete from sys_role_function where (role_id,function_id) in
        <trim prefix="(" suffixOverrides="," suffix=")">
            <foreach collection="functionIds" item="functionId">
                (#{roleId},#{functionId}),
            </foreach>
        </trim>
    </delete>

</mapper>